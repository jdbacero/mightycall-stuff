//JS-FILE AUTOGENERATED!
var MightyCallWebPhone = !!MightyCallWebPhone ? MightyCallWebPhone : (function () {
    var self = {};

    var _WEBPHONEAPP_URL = "https://panel.mightycall.com/WebPhoneApp/";
    var _CORE_JS_URL = _WEBPHONEAPP_URL + '/JavaScriptSDK/mightycall.webphone.core.js';

    var MIGHTYCALL_EVENT = 'mightycall_event';
    var MIGHTYCALL_WEBPHONE_STATUS = 'mightycall_webphone_status';


    var STATUS_INACTIVE = 'inactive';
    var STATUS_OFFLINE = 'offline';
    var STATUS_READY = 'ready';
    var STATUS_CALL_INCOMING = 'call_incoming';
    var STATUS_CALL_OUTGOING = 'call_outgoing';
    var STATUS_CALL_STARTED = 'call_started';

    var INTEGRATION_CONFIG = {};
    var SDK_CONFIG = {};

    function _init() {
        self.id = utils.guid();
        self.debug = true;
        self.enableDebug = function(isEnable) {
            self.debug = isEnable !== false;
        };

        self.Phone = {};

        self.ApplyConfig = _applyConfig;
        self.ApplySDKConfig = _applySDKConfig;

        // Methods
        self.Phone.Init = _phoneInit;
        self.Phone.Focus = _phoneFocus;
        self.Phone.Call = _phoneCall;
        self.Phone.Status = _phoneStatus;
        self.Phone.Accept = _phoneAccept;
        self.Phone.Reject = _phoneReject;
        self.Phone.HangUp = _phoneHangUp;
        self.Phone.Mute = _phoneMute;
        self.Phone.UnMute = _phoneUnMute;
        self.Phone.Hold = _phoneHold;
        self.Phone.UnHold = _phoneUnHold;

        self.Profile = {};
        //Promise-Methods
        self.Profile.SetUserStatus = _profileSetUserStatusPromise;
        self.Profile.GetUserStatus = _profileGetUserStatusPromise;

        //Profile-Events:
        self.Profile.OnStatusChange = new EventObserver();

        //Phone-Events
        self.Phone.OnStatusChange = new EventObserver();
        self.Phone.OnInactive = new EventObserver();
        self.Phone.OnOffline = new EventObserver();
        self.Phone.OnReady = new EventObserver();
        self.Phone.OnCallIncoming = new EventObserver();
        self.Phone.OnCallOutgoing = new EventObserver();
        self.Phone.OnCallStarted = new EventObserver();
        self.Phone.OnCallCompleted = new EventObserver();
        /**
         * obsolete! use onFail
         * @type {EventObserver}
         */
        self.Phone.OnError = new EventObserver();
        self.Phone.OnAccept = new EventObserver();
        self.Phone.OnReject = new EventObserver();
        self.Phone.OnHangUp = new EventObserver();
        self.Phone.OnMute = new EventObserver();
        self.Phone.OnUnMute = new EventObserver();
        self.Phone.OnHold = new EventObserver();
        self.Phone.OnUnHold = new EventObserver();
        self.Phone.OnFail = new EventObserver();

        _initLocalStorageListener();
    }

    function _phoneInit(containerId) {

        if (containerId) {
            utils.initWebPhoneInline(containerId);
        } else {
            utils.initWebPhoneWindow();
        }

        _overrideSetItem();
        _appendCoreJsToDocument();
    }

    function _phoneFocus() {
        var webPhoneInstanceReference = utils.getWebPhoneWindowReference();
        webPhoneInstanceReference.focus();
    }

    function _phoneCall(number) {
        if (utils.isEmptyReference()) {
            utils.getWebPhoneWindowReference();
            self.Phone.OnReady.subscribe(callUrgent);
        } else {
            callUrgent()
        }

        function callUrgent() {
            MightyCallWebPhoneCore.Phone.Call(number);
            self.Phone.OnReady.unsubscribe(callUrgent);
        }
    }

    function _phoneStatus() {
        var status = localStorage.getItem(MIGHTYCALL_WEBPHONE_STATUS);
        if (status == undefined) {
            status = STATUS_INACTIVE;
        }
        return status;
    }

    function _phoneAccept() {
        MightyCallWebPhoneCore.Phone.Accept();
    }

    function _phoneReject() {
        MightyCallWebPhoneCore.Phone.Reject();
    }

    function _phoneHangUp() {
        utils.getWebPhoneWindowReference();
        MightyCallWebPhoneCore.Phone.HangUp();
    }

    function _phoneMute() {
        utils.getWebPhoneWindowReference();
        MightyCallWebPhoneCore.Phone.Mute();
    }

    function _phoneUnMute() {
        utils.getWebPhoneWindowReference();
        MightyCallWebPhoneCore.Phone.UnMute();
    }

    function _phoneHold() {
        utils.getWebPhoneWindowReference();
        MightyCallWebPhoneCore.Phone.Hold();
    }

    function _phoneUnHold() {
        utils.getWebPhoneWindowReference();
        MightyCallWebPhoneCore.Phone.UnHold();
    }
    function _profileGetUserStatusPromise() {
        utils.getWebPhoneWindowReference();
        return MightyCallWebPhoneCore.Profile.GetUserStatus();
    }

    function _profileSetUserStatusPromise(statusStr) {
        utils.getWebPhoneWindowReference();
        return MightyCallWebPhoneCore.Profile.SetUserStatus(statusStr);
    }


    function _applyConfig(cfg) {
        INTEGRATION_CONFIG = cfg;
    }
    function _applySDKConfig(cfg) {
        SDK_CONFIG = cfg;
    }

    function _handleNotifications(evnt) {
        if (evnt.key == MIGHTYCALL_EVENT) {
            var data = JSON.parse(evnt.newValue);
            _fireEvent(data);
        }
    }

    function _fireEvent(data) {

        try {
            if (self[data.type] != undefined && self[data.type][data.event] != undefined) {
                self[data.type][data.event].fire(data.info);
            }
        } catch (exc) {
            utils.warn("error firing " + data.type + " " + data.event);
            utils.warn(exc);
        }
    }

    function _initLocalStorageListener() {
        utils.addEventHandler('storage', _handleNotifications);
    }
    function _appendCoreJsToDocument() {
        var script = document.createElement("script");
        script.src = _CORE_JS_URL;
        script.type = 'text/javascript';

        document.head.appendChild(script);
    }
    function _overrideSetItem() {
        var originalSetItem = Storage.prototype.setItem;
        Storage.prototype.setItem = function(key, data) {
            _handleNotifications({key: key, newValue: data});
            originalSetItem.apply(this, arguments);
        };

    }


    function EventObserver() {
        var self = {};
        var handlers = [];

        function _init() {
            self.subscribe = _subscribe;
            self.unsubscribe = _unsubscribe;
            self.fire = _fire;
        }

        function _subscribe(fn) {
            handlers.push(fn);
        }

        function _unsubscribe(fn) {
            handlers = handlers.filter(
                function (item) {
                    if (item !== fn) {
                        return item;
                    }
                }
            );
        }

        function _fire(o, thisObj) {
            var scope = thisObj || window;
            handlers.forEach(function (item) {
                item.call(scope, o);
            });
        }

        _init();

        return self;
    }

    var utils =  (function(){
        var self = {};

        function _init() {
            self.initWebPhoneInline = _initWebPhoneInline;
            self.initWebPhoneWindow = _initWebPhoneWindow;
            self.getWebPhoneWindowReference = _getWindowReference; //default behavior
            self.guid = _guid;
            self.addEventHandler = _addEventHandler;
            self.isEmptyReference = isEmptyReference;

            self.log = _debugLog;
            self.warn = _debugWarn;
        }

        function _initWebPhoneWindow() {
            _getWindowReference();
        }
        function _initWebPhoneInline(containerId) {
            self.getWebPhoneWindowReference = _noopReturnWindow;

            _initWebPhoneFrame(containerId);
            _appendCoreJsToDocument();
        }
        function _getWindowReference() {
            var reference = window.open('', 'mightycall_webphone_expand', 'width=345,height=500,location=false,status=false');

            if (navigator.vendor.indexOf("Apple") == 0 && /\sSafari\//.test(navigator.userAgent)) {
                window.resizeTo(360, 550);
            }

            if(navigator.userAgent.indexOf("Firefox") > -1){
                window.resizeTo(360, 565);
            }

            var location = _getFrameSrc();
            utils.log("wf location = ", location);

            try {
                if (isEmptyReference(reference)) {
                    reference.location = location;
                }
            } catch (e) {
				utils.log(e);
			}

            return reference;
        }

        function _initWebPhoneFrame(containerId) {
            var frame = document.createElement("iframe");
            frame.id = "mightyCallWebPhoneFrame";
            frame.src = _getFrameSrc();
            frame.allow = "microphone; autoplay";
			
            utils.log("wf location = ", frame.src);

            var style = "width:345px;height:500px;";
            frame.name="mightycall_webphone_expand";
            if (navigator.vendor.indexOf("Apple") == 0 && /\sSafari\//.test(navigator.userAgent)) {
                style="width:360px;height:550px;"
            }

            if(navigator.userAgent.indexOf("Firefox") > -1){
               style="width:360px;height:565px;"
            }

            frame.setAttribute("style", style);
            document.getElementById(containerId).appendChild(frame);
        }
        function _appendCoreJsToDocument() {
            var script = document.createElement("script");
            script.src = _CORE_JS_URL;
            script.type = 'text/javascript';

            document.head.appendChild(script);
        }
        function _noopReturnWindow() {
            return window;
        }
        function _getLocation() {
            return location.origin;
        };
        function _getFrameSrc() {
            var config = INTEGRATION_CONFIG;

            if (config.login == undefined || config.password == undefined) {
                throw "Config is empty. May you forget to call applyConfig?"
            }

            var uriParams = ["integration=" + encodeURIComponent(_getLocation()), "client_id=" + encodeURIComponent(config.login), "client_secret=" + encodeURIComponent(config.password)].join("&");

            return _WEBPHONEAPP_URL + '/Oauth/StartCrmIntegration?' + uriParams + "#enable"
        }
        
        function _guid() {
            function s4() {
                return Math.floor((1 + Math.random()) * 0x10000)
                  .toString(16)
                  .substring(1);
            }
            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
              s4() + '-' + s4() + s4() + s4();
        }
        function _addEventHandler(eventName, handler) {
            if (window.addEventListener) {
                window.addEventListener(eventName, handler);
            }
            else if (window.attachEvent) {
                window.attachEvent('on' + eventName, handler);
            }
        }
        function isEmptyReference(ref) {
            var reference = ref || window.open('', 'mightycall_webphone_expand', 'width=345,height=500,location=false,status=false');

            //iframe case
            if (reference.self !== reference.top) {
                //special check for yandex case
                try {
                    if (reference.location.href) {
                        return true;
                    }
                }
                catch (e) {
                    utils.warn(e);
                }

                return false;
            }

            try {
                if (reference.location.href &&
                reference.location.host !== location.host) //same-domain test
                {
                    return true;
                }
            } catch (e) {
                utils.warn(e);
            }

            return false;
        }
        function _debugWarn() {
            if (MightyCallWebPhone.debug) {
                console.warn.apply({}, arguments);
            }
        }
        function _debugLog() {
            if (MightyCallWebPhone.debug) {
                console.log.apply({}, arguments);
            }
        }

        _init();


        return self;
    })();



    _init();
    return self;
})();